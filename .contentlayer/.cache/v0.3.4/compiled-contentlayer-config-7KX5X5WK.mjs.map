{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, defineNestedType, makeSource } from \"contentlayer/source-files\";\nimport { visit } from \"unist-util-visit\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport path from \"path\"\nimport { getHighlighter, loadTheme } from \"@shikijs/compat\"\n\nconst ProjectImage = defineNestedType(() => ({\n    name: 'ProjectImage',\n    fields: {\n        imageUrl: {\n            type: 'string',\n            required: true,\n        },\n        title: {\n            type: 'string',\n        },\n        alt: {\n            type: 'string',\n        }\n    }\n}));\n\nexport const Project = defineDocumentType(() => ({\n    name: 'Project',\n    filePathPattern: `projects/**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string',\n            required: true,\n        },\n        client: {\n            type: 'string',\n            required: true,\n        },\n        year: {\n            type: 'number',\n            required: true,\n        },\n        featuredImage: {\n            type: 'string',\n            required: true,\n        },\n        category: {\n            type: 'list',\n            of: { type: 'string'},\n        },\n        tags: {\n            type: 'list',\n            of: { type: 'string' },\n        },\n        images: {\n            type: 'list',\n            of: ProjectImage,\n        },\n        udpated: {\n            type: 'date',\n        },\n    },\n    computedFields: {\n        url: {\n            type: 'string',\n            resolve: (project) => `/work/${project._raw.flattenedPath.replace(/projects\\/?/, '')}`\n        },\n    },\n}));\n\nexport const Post = defineDocumentType(() => ({\n    name: 'Post',\n    filePathPattern: `posts/**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string',\n            required: true,\n        },\n        excerpt: {\n            type: 'string',\n            required: true,\n        },\n        featuredImage: {\n            type: 'string',\n            required: true,\n        },\n        date: {\n            type: 'date',\n            required: true,\n        },\n        updated: {\n            type: 'date',\n        },\n        tags: {\n            type: 'list',\n            of: { type: 'string' },\n        },\n        category: {\n            type: 'list',\n        }\n    },\n    computedFields: {\n        url: {\n            type: 'string',\n            resolve: (post) => `/blog/${post._raw.flattenedPath.replace(/posts\\/?/, '')}`,\n        },\n    },\n}));\n\nexport default makeSource({\n    contentDirPath: 'content',\n    documentTypes: [Project, Post],\n    // mdx: {\n    //     remarkPlugins: [],\n    //     rehypePlugins: [rehypePrettyCode],\n        //     () => (tree) => {\n        //         visit(tree, (node) => {\n        //             if (node?.type === \"element\" && node?.tagName === \"pre\") {\n        //                 const [codeEl] = node.children;\n                \n        //                 if (codeEl.tagName !== \"code\") return;\n                \n        //                 node.raw = codeEl.children?.[0].value;\n        //             }\n        //         });\n        //     },\n        //     [\n        //         rehypePrettyCode,\n        //         {\n        //             theme: {\n        //                 dark: \"github-dark\",\n        //                 light: \"github\",\n        //             }\n        //         }\n        //     ],\n        //     () => (tree) => {\n        //         visit(tree, (node) => {\n        //             if (node?.type === \"element\" && node?.tagName === \"div\") {\n        //                 if (!(\"data-rehype-pretty-code-fragment\" in node.properties)) {\n        //                     return;\n        //                 }\n                \n        //                 for (const child of node.children) {\n        //                     if (child.tagName === \"pre\") {\n        //                         child.properties[\"raw\"] = node.raw;\n        //                     }\n        //                 }\n        //             }\n        //         });\n        //     },\n        // ]\n    // }\n})"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB,kBAAkB;AAMjE,IAAM,eAAe,iBAAiB,OAAO;AAAA,EACzC,MAAM;AAAA,EACN,QAAQ;AAAA,IACJ,UAAU;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,IACV;AAAA,IACA,KAAK;AAAA,MACD,MAAM;AAAA,IACV;AAAA,EACJ;AACJ,EAAE;AAEK,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC7C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,eAAe;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,UAAU;AAAA,MACN,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAQ;AAAA,IACxB;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,IACzB;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,IAAI;AAAA,IACR;AAAA,IACA,SAAS;AAAA,MACL,MAAM;AAAA,IACV;AAAA,EACJ;AAAA,EACA,gBAAgB;AAAA,IACZ,KAAK;AAAA,MACD,MAAM;AAAA,MACN,SAAS,CAAC,YAAY,SAAS,QAAQ,KAAK,cAAc,QAAQ,eAAe,EAAE,CAAC;AAAA,IACxF;AAAA,EACJ;AACJ,EAAE;AAEK,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC1C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,SAAS;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,eAAe;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,SAAS;AAAA,MACL,MAAM;AAAA,IACV;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,IACzB;AAAA,IACA,UAAU;AAAA,MACN,MAAM;AAAA,IACV;AAAA,EACJ;AAAA,EACA,gBAAgB;AAAA,IACZ,KAAK;AAAA,MACD,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,SAAS,KAAK,KAAK,cAAc,QAAQ,YAAY,EAAE,CAAC;AAAA,IAC/E;AAAA,EACJ;AACJ,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,SAAS,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyCjC,CAAC;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../components/custom-toc.tsx"],
  "sourcesContent": ["import { defineDocumentType, defineNestedType, makeSource } from \"contentlayer/source-files\";\nimport { visit } from \"unist-util-visit\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeToc from \"@jsdevtools/rehype-toc\"\nimport rehypeSlug from \"rehype-slug\"\nimport { customTOC } from \"./components/custom-toc\";\n\nconst ProjectImage = defineNestedType(() => ({\n    name: 'ProjectImage',\n    fields: {\n        imageUrl: {\n            type: 'string',\n            required: true,\n        },\n        title: {\n            type: 'string',\n        },\n        alt: {\n            type: 'string',\n        }\n    }\n}));\n\nexport const Project = defineDocumentType(() => ({\n    name: 'Project',\n    filePathPattern: `projects/**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string',\n            required: true,\n        },\n        client: {\n            type: 'string',\n            required: true,\n        },\n        year: {\n            type: 'number',\n            required: true,\n        },\n        featuredImage: {\n            type: 'string',\n            required: true,\n        },\n        category: {\n            type: 'list',\n            of: { type: 'string'},\n        },\n        tags: {\n            type: 'list',\n            of: { type: 'string' },\n        },\n        images: {\n            type: 'list',\n            of: ProjectImage,\n        },\n        updated: {\n            type: 'date',\n        },\n    },\n    computedFields: {\n        url: {\n            type: 'string',\n            resolve: (project) => `/work/${project._raw.flattenedPath.replace(/projects\\/?/, '')}`\n        },\n    },\n}));\n\nexport const Post = defineDocumentType(() => ({\n    name: 'Post',\n    filePathPattern: `posts/**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string',\n            required: true,\n        },\n        excerpt: {\n            type: 'string',\n            required: true,\n        },\n        featuredImage: {\n            type: 'string',\n            required: true,\n        },\n        date: {\n            type: 'date',\n            required: true,\n        },\n        updated: {\n            type: 'date',\n        },\n        tags: {\n            type: 'list',\n            of: { type: 'string' },\n        },\n        category: {\n            type: 'enum',\n            options: ['Guide', 'Tutorial'],\n        }\n    },\n    computedFields: {\n        url: {\n            type: 'string',\n            resolve: (post) => `/blog/${post._raw.flattenedPath.replace(/posts\\/?/, '')}`,\n        },\n    },\n}));\n\nexport default makeSource({\n    contentDirPath: 'content',\n    documentTypes: [Project, Post],\n    mdx: {\n        remarkPlugins: [],\n        rehypePlugins: [\n            () => (tree) => {\n                visit(tree, (node) => {\n                    if (node?.type === \"element\" && node?.tagName === \"pre\") {\n                        const [codeEl] = node.children;\n            \n                        if (codeEl.tagName !== \"code\") return;\n            \n                        node.raw = codeEl.children?.[0].value;\n                    }\n                });\n            },\n            [\n                rehypePrettyCode, \n                {\n                    theme: {\n                        dark: \"github-dark\",\n                        light: \"github-light\",\n                    },\n                    keepBackground: false,\n                },\n            ],\n            [rehypeSlug],\n            [rehypeToc, { customizeTOC: customTOC }],\n            () => (tree) => {\n                visit(tree, (node) => {\n                    if (node?.type === \"element\" && node?.tagName === \"figure\") {\n                        if (!(\"data-rehype-pretty-code-figure\" in node.properties)) {\n                            return;\n                        }\n            \n                        for (const child of node.children) {\n                            if (child.tagName === \"pre\") {\n                                child.properties[\"raw\"] = node.raw;\n                            }\n                        }\n                    }\n                });\n                \n            },\n        ],\n    }\n})", "\n\nexport const customTOC = (toc: any) => {\n    try {\n      const { children } = toc;\n      const childrenOfChildren = children?.[0]?.children;\n      if (!children?.length || !childrenOfChildren?.length) return null;\n    } catch (e) {}\n    return {\n      type: 'element',\n      tagName: 'div',\n      properties: { className: 'toc bg-muted rounded-sm p-4 mt-6' },\n      children: [\n        {\n          type: 'element',\n          tagName: 'p',\n          properties: { className: 'title' },\n          children: [\n            {\n              type: 'text',\n              value: 'Table of Contents',\n            },\n          ],\n        },\n        ...(toc.children || []),\n      ],\n    };\n  };"],
  "mappings": "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",
  "names": []
}
